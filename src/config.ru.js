import {
  projectsList,
  aboutAvatar,
  sidebarIcons
} from "./config.base";

export const sidebar = {
  menu: [
    {
      title: "Главная",
      url: "/",
      icon: "home"
    },
    {
      title: "Обо мне",
      url: "/about",
      icon: "user"
    },
    {
      title: "Проекты",
      url: "/projects",
      icon: "folder-open"
    },
    {
      title: "Контакты",
      url: "/contacts",
      icon: "envelope"
    }
  ],
  icons: sidebarIcons
}

export const sidebarItems = {
  
}

export const main = {
  caption: "Никита Назаров",
  subcaption: "Frontend разработчик",
}

export const about = {
  caption: "Обо мне",
  content: [
    {
      caption: "Персональная информация",
      text: [
        "Имя: Назаров Никита",
        "Дата рождения: 15.06.1997",
        "Местонахождение: Москва, Россия",
      ],
    },
    {
      caption: "Образование",
      text: [
        "РТУ МИРЭА (2019)",
        "Специальность: Информационные системы и технологии",
        "Степень: Бакалавриат",
      ],
    },
    {
      caption: "Коротоко обо мне",
      text: [
        // "Я начал интерисоваться веб-разработкой полтора года назад, за это время я закончил университет, получил небольшой опыт работы над независимым проектом в качестве верстальщика, а также улучшил свои знания в области Front-end разработки. В свободное время я учу английский, интересуюсь новостями из мира веб-разработки, люблю смотреть старые фильмы, а также делаю музыку."
        "Я начал интерисоваться веб-разработкой полтора года назад, до этого программировал на таких языках как C++ и Java. За эти полтора года я закончил университет, получил небольшой опыт работы над независимым проектом в качестве верстальщика, а также улучшил свои знания в области Front-end разработки. В свободное время я учу английский, интересуюсь новостями из мира веб-разработки, люблю смотреть старые фильмы, а также делаю музыку."
      ],
    }
  ],
  img: aboutAvatar,
}

export const projects = {
  caption: "Мои проекты",
  filterText: "Проекты с ",
  openLink: "Открыть",
  descriptionButton: "Описание проекта",
  projectsList: [
    {
      title: "Lawyer",
      link: "https://sorc97.github.io/Lawyer",
      img: require("./img/Lawyer.jpg"),
      tags: ["html", "css", "js", "responsive"],
      github: "https://github.com/sorc97/Lawyer",
      category: "Верстка",
      description: "Данный проект создан при помощи HTML, CSS и JavaScript, для размещения элементов использовалась технология CSS Flexbox, присутствует адаптивная версия, выполненная с помощью медиа запросов CSS"
    },
    {
      title: "Pets",
      link: "https://sorc97.github.io/Pets",
      img: require("./img/Pets.jpg"),
      tags: ["html", "css", "bootstrap", "js", "BEM", "mobile first", "responsive"],
      github: "https://github.com/sorc97/ShelterLayout",
      category: "Верстка",
      description: "Проект выполнен на технологиях HTML, CSS, JavaScript и Bootstrap, разработка велась по принципу Mobile First, когда сначала делается версия для мобильных устройств, а затем для десктопных. Элементы позиционировались при помощи Bootstrap Grid и CSS Flexbox. Адаптиция под разные резрешения экранов разрабатывалась с помощью Bootstrap Grid и CSS media queries. Также на сайте присутствует слайдер и модальные окна, сделаные на чистом JavaScript."
    },
    {
      title: "ZeroLayout",
      link: "https://sorc97.github.io/ZeroLayout",
      img: require("./img/Zero.jpg"),
      tags: ["html", "scss", "css grid", "js", "webpack", "BEM", "responsive"],
      github: "https://github.com/sorc97/ZeroLayout",
      category: "Верстка",
      description: "Данный проект представляет из себя многостраничный сайт, созданный при помщи HTML, SCSS, JavaScript и Webpack. В ходе разрабоки применялась методолгия БЭМ, элементы позиционировались при помощи CSS Grid. Для сборки проекта использовался бандлер Webpack, его конфигурационный файл был разделен на три файла для разграничения режима разработки (development) и готового проекта (production), также были подключены необходимые лоадеры и пресеты для работы с SASS файлами, картинками и шрифтами. Адаптивная версия сайта выполнена c помощью CSS media queries и CSS Grid."
    },
    {
      title: "ImageGenerator",
      link: "https://sorc97.github.io/ImageGenerator",
      img: require("./img/ImageGenerator.jpg"),
      tags: ["html", "css", "js", "api", "lazy load", "responsive"],
      github: "https://github.com/sorc97/ImageGenerator",
      category: "Приложения",
      description: "Данный проект представляет из себя одностроничное приложение, взаимодействующее с Api сервером, позволяющее генерировать изображения по запросу пользователя, можно выбрать колличество изображений на странице, ввести запрос на изображения, а также подгрузить новые, по уже имеющемуся запросу, также пользователь может вызвать модальное окно с более качественным разрешением картинки, при клике на изображение. В данном проекте реализована технология LazyLoad, благодаря который загружаются только те изображения, которые находятся в видимой обалсти экрана пользователя. Проект реализован на HTML, CSS, функциональная часть на чистом JavaScript, адаптивная версия сделана с помощью медиа запросов CSS."
    },
    {
      title: "Dictionary",
      link: "https://sorc97.github.io/Dictionary",
      img: require("./img/Dictionary.jpg"),
      tags: ["html", "css", "react", "redux", "responsive"],
      github: "https://github.com/sorc97/Dictionary",
      category: "Приложения",
      description: "Данный проект является одностроничным приложением, инициализированным с помощью Create React App и созданный с помощью React и Redux. Приложение позволяет создать карточку слова, которую можно расположить в трех секциях сложности (Hard, Medium и Easy), можно выбрать на каком языке будут отображаться слова, или поменять язык одной карточки, кликнув на нее. Также можно вызвать контекстное меню на карточке, в этом меню слово можно поместить в дргую секцию сложности, удалить или добавить фразы, для лучшего запоминания. Также присутствует функция поиска слова, которая сразу откроет его перевод и фразы. Присутствует адаптивная версия приложения, выполненная с помощью меди запросов CSS."      
    },
    {
      title: "TrelloClone",
      link: "https://sorc97.github.io/trelloClone",
      img: require("./img/TrelloClone.jpg"),
      tags: ["html", "scss", "typescript", "react", "react hooks", "webpack"],
      github: "https://github.com/sorc97/trelloClone",
      category: "Приложения",
      description: "Данный проект представляет из себя одностроничное приложение, выполненное с помощью React, TypeScript и SCSS. Управление стостоянием осущствляется при помощи ReactContext и ReactHooks. Приложение реализует струтуру управления проектами, извустную как канбан. Для начала создается новый проект, при переходе в который можно создать множество колонок с заданиями, а затем переносить задания между колонками. Перенос заданий осуществлен при помощи технологии HTML5 Drag 'n Drop (без использования библиотек). В процессе переноса задания, при размещении его над другим заданием, происходит их сортировка (независимо от колонки), при размещении задания на другой колоке, происходит перенос на нужную колонку, если задание упало на свободное место, то оно встанет в конец списка. Также присутсвует возможность редактирования и удаления доски проекта, колонки и задания. Проект был собран с помощью Webpack, этапы разработки разделены при помощи переменных окружения, опираясь на которые и формируется итоговый конфигурационный файл конкретного этапа разработки. Адаптивная версия проекта не реализована, так как Drag 'n Drop не работает на тач скрине."
    },
    {
      title: "MusicShop",
      link: "http://nnd1997.ru:50",
      img: require("./img/MusicShop.jpg"),
      tags: [
        "html", "css", "css grid", "nodeJs", "api", "mongoDB", "react", "redux", "webpack","responsive"
      ],
      github: "https://github.com/sorc97/MusicShop",
      category: "Приложения",
      description: "Данный проект разделен на Front-end и Back-end. Front-end представляет из себя одностраничное приложение, созданное с помощью React, Redux и CSS. Приложение загружает данные с сервера в зависимости от того, в какой секции загрузился пользователь. Допустим, пользователь загрузился на странице конкретного товара, приложение запрашивает данные только этого товара, затем если пользователь переходит на страницу категории товара, запрашиваются только товары из этой категории, таким образом минимизируется объем ненужных данных, загружаемых пользователем. В приложении присуствует возможность сортировки и поска товаров, все товары разделены на страницы и категории. Также можно добавить товар в корзину, непосредственно из корзины можно увеличить колличество отдельно взятого товара, данные из корзины хранятся в LocalStorage, таким образом при перезагрузке страницы они не будут утерены. Элементы позиционировались при помощи CSS Grid и Flexbox. Адаптивная версия реализована при помощи медиа запросов CSS. \n Back-end представляет из себя REST API приложение, которое связанно с базой данных MongoDB посредством Mongoose. API отвечает данными основываясь на поступающем запросе."
    },
  ]
}

export const contacts = {
  caption: "Контакты",
  contactsList: [
    {
      title: "Мои профили",
      icons: [
        {name: "github", description: "Github", link: "https://github.com/sorc97"},
        {name: "vk", description: "Vkontakte", link: "https://vk.com/nikita_nnd"}
      ]
    },
    {
      title: "Контакты для связи",
      icons: [
        {name: "telegram", description: "Telegram", link: "https://t.me/sorc97"},
        {name: "envelope", description: "nnd9797@gmail.com", link: "mailto:nnd9797@gmail.com"}
      ]
    },
  ]
}